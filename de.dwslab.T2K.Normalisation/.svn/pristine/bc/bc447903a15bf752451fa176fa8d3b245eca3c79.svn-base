package de.uni_mannheim.informatik.dws.t2k.normalisation;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.core.WhitespaceTokenizer;
import org.apache.lucene.analysis.core.LowerCaseFilter;
import org.apache.lucene.analysis.core.StopFilter;
import org.apache.lucene.analysis.en.PorterStemFilter;
import org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.util.CharArraySet;
import org.apache.lucene.analysis.util.StopwordAnalyzerBase;
import org.apache.lucene.util.Version;
import org.apache.commons.lang3.StringEscapeUtils;

public class StringNormalizer {
    
    //determines which string/character corresponds to the null value
    public static String nullValue = "NULL";
    
  //remove customized stopwords
    public static List<String> stopWords = new ArrayList<>();

    /**
     * Use normaliseValue and normaliseHeader instead
     *
     * @param columnName
     * @return
     */
    public static String normaliseHeader(String columnName) {
        columnName = StringEscapeUtils.unescapeJava(columnName);
        columnName = columnName.replace("\"", "");
        columnName = columnName.replace("|", " ");
        columnName = columnName.replace(",", "");
        columnName = columnName.replace("{", "");
        columnName = columnName.replace("}", "");
        columnName = columnName.replaceAll("\n", "");

        columnName = columnName.replace("&nbsp;", " ");
        columnName = columnName.replace("&nbsp", " ");
        columnName = columnName.replace("nbsp", " ");
        columnName = columnName.replaceAll("<.*>", "");

        if (columnName.equals("")) {
            columnName = nullValue;
        }
        columnName = columnName.toLowerCase();
        columnName = columnName.trim();
        
        columnName = columnName.replaceAll("\\.", "");
        columnName = columnName.replaceAll("\\$", "");
        // clean the values from additional strings
        if (columnName.contains("/")) {
            columnName = columnName.substring(0, columnName.indexOf("/"));
        }

        if (columnName.contains("\\")) {
            columnName = columnName.substring(0, columnName.indexOf("\\"));
        }

        return columnName;
    }


    public static String normaliseValue(String value) {
        try {
            value = value.replaceAll("\n", "");
            value = value.replace("&nbsp;", " ");
            value = value.replace("&nbsp", " ");
            value = value.replaceAll("[&\\?]#[0-9]{1,3};", "");
            value = value.replace("nbsp", " ");
            value = value.replaceAll("<.*>", "");
            value = value.toLowerCase();
            value = value.trim();
            if (value.equals("")) {
                value = nullValue;
            }
        } catch (Exception e) {
        }
        return value;
    }
    

    
    private static final Pattern removePattern = Pattern.compile("\"|\\||,|\\{|\\}|<.*>");
    private static final Pattern whitespacePattern = Pattern.compile("\n|\\s+|&*nbsp;*");
    private static final Pattern bracketsPattern = Pattern.compile("\\(.*\\)");
    
    public static String cleanString(String value,
            boolean removeContentInBrackets) {
        try {
            value = StringEscapeUtils.unescapeJava(value);
            //value = value.replace("\"", "");
            //value = value.replace("|", " ");
            //value = value.replace(",", "");
            //value = value.replace("{", "");
            //value = value.replace("}", "");
            value = removePattern.matcher(value).replaceAll("");
            
            //value = value.replaceAll("\n", " ");
            //value = value.replaceAll("\\s+", " ");
            //value = value.replace("&nbsp;", " ");
            //value = value.replace("&nbsp", " ");
            //value = value.replace("nbsp", " ");
            value = whitespacePattern.matcher(value).replaceAll(" ");
            
            //value = value.replaceAll("<.*>", "");
            if (removeContentInBrackets) {
                //value = value.replaceAll("\\(.*\\)", "");
                value = bracketsPattern.matcher(value).replaceAll("");
            }
            if (value.equals("")) {
                value = null;
            } else {
                value = value.toLowerCase();
                value = value.trim();
            }
        } catch (Exception e) {
        }
        return value;
    }
}
